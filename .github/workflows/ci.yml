name: build

on:
  push:
    branches: [ develop, master ]
    tags: [ '*' ]
  pull_request:
    branches: [ develop ]

jobs:
  xliff:
    runs-on: ubuntu-20.04

    name: XML Lint (Xliff)
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install libxml2-utils
        run: sudo apt install libxml2-utils

      - name: Running xmllint (Xliff)
        run: |
          find Resources/Private/Language/ -name '*.xlf' -type f | xargs xmllint --noout --schema .Build/xliff-core-1.2-strict.xsd

  lint:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        php-versions: ['7.2', '7.3', '7.4']

    name: Lint PHP ${{ matrix.php-versions }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}

      - name: Running php lint with ${{ matrix.php-versions }}
        run: |
          errors=$(find . -name \*.php ! -path "./.Build/*" -exec php -d display_errors=stderr -l "{}" 2>&1 >/dev/null \;) && echo "${errors}" && test -z "${errors}"

  unit:
    needs: lint

    runs-on: ubuntu-20.04

    continue-on-error: ${{ matrix.env.experimental == true }}
    strategy:
      fail-fast: false
      matrix:
        env:
          - { php: 7.4, TYPO3_VERSION: ^10.4, TESTING_FRAMEWORK: ^6.2.3 }
          - { php: 7.3, TYPO3_VERSION: ^10.4, TESTING_FRAMEWORK: ^6.2.3 }
          - { php: 7.2, TYPO3_VERSION: ^10.4, TESTING_FRAMEWORK: ^6.2.3 }
          - { php: 7.2, TYPO3_VERSION: ^10.4, TESTING_FRAMEWORK: ^5.0.15, PREFER_LOWEST: "--prefer-lowest" }
          - { php: 7.2, TYPO3_VERSION: "dev-master as 10.4.2", TESTING_FRAMEWORK: ^6.2.3, experimental: true }

    env: ${{ matrix.env }}

    name: Run unit and functional tests with PHP${{ matrix.env.php }} and testing framework ${{ matrix.env.TESTING_FRAMEWORK }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.env.php }}
          tools: composer
          extensions: pdo, sqlite3

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache
          key: dependencies-composer-${{ hashFiles('composer.json') }}

      - name: Install
        run: |
          export TYPO3_PATH_WEB=$PWD/.Build/Web;
          composer require typo3/cms-core="${TYPO3_VERSION}" ${PREFER_LOWEST};
          if [[ ! -z "${TESTING_FRAMEWORK}" ]]; then composer require --dev typo3/testing-framework="${TESTING_FRAMEWORK}"; fi;
          git checkout composer.json;

      - name: Run unit tests
        run: |
          echo "no phpunit testing for now"
          # php .Build/Web/vendor/bin/phpunit --colors -c .Build/Web/vendor/typo3/testing-framework/Resources/Core/Build/UnitTests.xml Tests/Unit/;

      - name: Run functional tests
        run: |
          echo "Running ${TYPO3_VERSION} functional tests with $(which php)";
          export typo3DatabaseDriver="pdo_sqlite";
          php .Build/Web/vendor/bin/phpunit --colors -c .Build/Web/vendor/typo3/testing-framework/Resources/Core/Build/FunctionalTests.xml Tests/Functional/;

  publish:
    needs: [ xliff, lint, unit ]
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: ubuntu-20.04

    strategy:
      matrix:
        php-versions: ['7.4']

    env:
      EXTENSION: sf_books
      USERNAME: ${{ secrets.typo3Username }}
      PASSWORD: ${{ secrets.typo3Password }}

    name: TYPO3 TER release
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}

      - name: publish in ter
        run: |
          TAG="$(echo ${GITHUB_REF} | cut -d / -f 3)"
          if [[ "${TAG}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && [ -n "${USERNAME}" ] && [ -n "${PASSWORD}" ]; then
            echo -e "Preparing upload of release ${TAG} to TER\n";

            # Install requirements
            composer global require helhum/ter-client

            # Cleanup before we upload
            git reset --hard HEAD && git clean -fx

            # Remove folder that shouldn't to get uploaded
            rm -rf .Build
            rm -rf .github

            # Set version number from TAG
            sed -i "s/version' => '.*'/version' => '${TAG}'/" ext_emconf.php

            # Upload
            TAG_MESSAGE=`git tag -n10 -l ${TAG} | sed 's/^[0-9.]*[ ]*//g'`
            echo "Uploading release ${TAG} to TER"
            $HOME/.composer/vendor/bin/ter-client upload ${EXTENSION} . -u "${USERNAME}" -p "${PASSWORD}" -m "${TAG_MESSAGE}"
          fi;
